///////////////////////////////////////////////
// Simulation of I2C Memory (Slave)
// 
// Enssat - Universite de Rennes 1
// Mars 2020
//
// ATTENTION, CE CODE EST UTILISE PAR LE 
// SIMULATEUR POUR EMULER UNE MEMOIRE CONNECTEE
// SUR LE PERIPHERIQUE I2C0
// 
// CE CODE NE DOIT DONC PAS ETRE AJOUTE
// COMME FICHIER DE VOTRE APPLICATION
///////////////////////////////////////////////

DEFINE int SADR                             
SADR = 0xA

DEFINE int ADDRLOW 
DEFINE int ADDRHIGH 

ADDRLOW = 0x00
ADDRHIGH = 0x7FF

MAP 0x00, 0x4FF READ WRITE EXEC       

DEFINE int STARTTRAME
STARTTRAME = 0x0100

DEFINE int ACK_TRAME 
ACK_TRAME = 0xFF00

DEFINE int STOP_TRAME
STOP_TRAME = 0x1FF

DEFINE int NBBITSTRAME
NBBITSTRAME = 9

DEFINE int DEBUG
DEBUG = 0

///////////////////////////////////////////////
// Fonction qui simule la memoire

signal void I2CMemory (void) {
	unsigned long adr;
	int i ;
	printf("I2C> Simulation Memoire I2C active \n\r");
	while (1) {
		wwatch (I2C0_OUT);                      
		printf(">I2C0 : Reception trame I2C \n\r");
		if (DEBUG) { printf(">I2C0(1) : I2C0_OUT "); for (i = NBBITSTRAME; i > 0; i--) printf("%d", (I2C0_OUT >> (i-1) ) & 1); printf("\n"); }
		
		while (I2C0_OUT == STARTTRAME) {              // START detected
			printf(">I2C0 : Trame de start detectee \n\r");

			wwatch (I2C0_OUT);                      // Wait for data from Microcontroller		
			if (DEBUG) { printf(">I2C0(1) : I2C0_OUT "); for (i = NBBITSTRAME; i > 0; i--) printf("%d", (I2C0_OUT >> (i-1) ) & 1); printf("\n"); }

			if (I2C0_OUT > ADDRHIGH) {
				printf(">I2C0 : Adressage hors plage memoire \n\r");
				continue;
			}
			if (((I2C0_OUT >> 4) & 0xF ) != SADR) {
				printf(">I2C0 : Memoire non sollicitee\n\r");
				continue;  // test if Slave is addressed
			}
			
			printf(">I2C0 : Memoire sollicitee\n\r");
			
			I2C0_IN = ACK_TRAME;                       // ACK to Microcontroller
			
			// On extrait l'adresse de l'operation de lecture ou ecriture
			// Les 3 bits de poids forts sont dans les bits 1, 2 et 3 du premier mot de 8 bits
			// qui correspondent a A10 A9 et A8
			//   masque  00001110, puis on decale de 7 bits a gauche pour positionner A8 en position 8 dans adr
			adr = (I2C0_OUT & 0xE) << 7;
						
			// On recupere le mot suivant, qui contient la fin de l'adresse
			wwatch (I2C0_OUT); 

			if (DEBUG) { printf(">I2C0(1) : I2C0_OUT "); for (i = NBBITSTRAME; i > 0; i--) printf("%d", (I2C0_OUT >> (i-1) ) & 1); printf("\n"); }
			
			I2C0_IN = ACK_TRAME;                       // ACK to Microcontroller
			adr += (I2C0_OUT & 0xFF);
	
			printf(">I2C0_OUT : Adresse operation %d \r\n",adr);

			// Si une trame de start arrive, on est en lecture, sinon ecriture
			wwatch (I2C0_OUT); 
			I2C0_IN = ACK_TRAME;                       // ACK to Microcontroller
			if (DEBUG) { printf(">I2C0(1) : I2C0_OUT "); for (i = NBBITSTRAME; i > 0; i--) printf("%d", (I2C0_OUT >> (i-1) ) & 1); printf("\n"); }
			
			if (I2C0_OUT == STARTTRAME)  {   
			
				//   LECTURE DANS LA MEMOIRE
				
				printf(">I2C0 : Lecture memoire a partir de l adresse : %d \r\n",adr);
			
				wwatch (I2C0_OUT);  
				I2C0_IN = ACK_TRAME;                       // ACK to Microcontroller

				while (1) {
					I2C0_IN = _RBYTE(adr);              // Read Byte from Memory
					printf(">I2C0 : Lecture memoire adr: %d ; data %d\r\n",adr,_RBYTE(adr));
					adr++;                             // Increment Address
					wwatch (I2C0_OUT);                  // Wait for ACK from Microcontroller
					if (I2C0_OUT != ACK_TRAME) break;
				}
				printf(">I2C0 : Fin Lecture Memoire \r\n");
			}  else {                                 // Slave Write
				//   ECRITURE DANS LA MEMOIRE
				printf(">I2C0 : Ecriture memoire a partir de l adresse : %d \r\n",adr);
				while (1) {
					if (I2C0_OUT > STOP_TRAME) break;
					_WBYTE (adr, I2C0_OUT);             // Store Byte in Memory
					printf(">I2C0 : Ecriture memoire adr: %d ; data %d\r\n",adr,I2C0_OUT);
					adr++;                             // Increment Address
					wwatch (I2C0_OUT);                  // Wait for data from Microcontroller
					I2C0_IN = ACK_TRAME;                   // ACK to Microcontroller
					if (DEBUG) { printf(">I2C0(1) : I2C0_OUT "); for (i = NBBITSTRAME; i > 0; i--) printf("%d", (I2C0_OUT >> (i-1) ) & 1); printf("\n"); }
        		}
				printf(">I2C0 : Fin Ecriture Memoire \r\n");
      		}
    	}
  	}
}

I2CMemory()     // Start the signal function